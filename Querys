2. Logon to Database

select name,open_mode from v$database;

3. Find Long Running Sessions

/*************************************************************************
Check the ALL Active/Inactive session
**************************************************************************/

set linesize 750 pages 9999
column box format a30
column spid format a10
column username format a30 
column program format a30
column os_user format a20
col LOGON_TIME for a20  

select b.inst_id,b.sid,b.serial#,a.spid, substr(b.machine,1,30) box,to_char (b.logon_time, 'dd-mon-yyyy hh24:mi:ss') logon_time,
 substr(b.username,1,30) username,
 substr(b.osuser,1,20) os_user,
 substr(b.program,1,30) program,status,b.last_call_et AS last_call_et_secs,b.sql_id 
 from gv$session b,gv$process a 
 where b.paddr = a.addr 
 and a.inst_id = b.inst_id  
 and type='USER'
 order by logon_time;

/*************************************************************************
Check the all Active session
**************************************************************************/

set linesize 750 pages 9999
column box format a30
column spid format a10
column username format a30 
column program format a30
column os_user format a20
col LOGON_TIME for a20  

select b.inst_id,b.sid,b.serial#,a.spid, substr(b.machine,1,30) box,to_char (b.logon_time, 'dd-mon-yyyy hh24:mi:ss') logon_time,
 substr(b.username,1,30) username,
 substr(b.osuser,1,20) os_user,
 substr(b.program,1,30) program,status,b.last_call_et AS last_call_et_secs,b.sql_id 
 from gv$session b,gv$process a 
 where b.paddr = a.addr 
 and a.inst_id = b.inst_id  
 and type='USER' and b.status='ACTIVE'
 order by logon_time;


/*************************************************************************
Check the ALL Active/Inactive sessions by SID
**************************************************************************/

set linesize 750 pages 9999
column box format a30
column spid format a10
column username format a30 
column program format a30
column os_user format a20
col LOGON_TIME for a20  

select b.inst_id,b.sid,b.serial#,a.spid, substr(b.machine,1,30) box,to_char (b.logon_time, 'dd-mon-yyyy hh24:mi:ss') logon_time,
 substr(b.username,1,30) username,
 substr(b.osuser,1,20) os_user,
 substr(b.program,1,30) program,status,b.last_call_et AS last_call_et_secs,b.sql_id 
 from gv$session b,gv$process a 
 where b.paddr = a.addr 
 and a.inst_id = b.inst_id  
 and type='USER' and b.SID='&SID'
-- and b.status='ACTIVE'
-- and b.status='INACTIVE'
 order by logon_time;

/*************************************************************************
Check the ALL Active/Inactive sessions by Username
**************************************************************************/

set linesize 750 pages 9999
column box format a30
column spid format a10
column username format a30 
column program format a30
column os_user format a20
col LOGON_TIME for a20  

select b.inst_id,b.sid,b.serial#,a.spid, substr(b.machine,1,30) box,to_char (b.logon_time, 'dd-mon-yyyy hh24:mi:ss') logon_time,
 substr(b.username,1,30) username,
 substr(b.osuser,1,20) os_user,
 substr(b.program,1,30) program,status,b.last_call_et AS last_call_et_secs,b.sql_id 
 from gv$session b,gv$process a 
 where b.paddr = a.addr 
 and a.inst_id = b.inst_id  
 and type='USER' and b.username='&username'
-- and b.status='ACTIVE'
-- and b.status='INACTIVE'
 order by logon_time;


/*************************************************************************
SQL Monitor
**************************************************************************/
set lines 1000 pages 9999 
column sid format 9999 
column serial for 999999
column status format a15
column username format a10 
column sql_text format a80
column module format a30
col program for a30
col SQL_EXEC_START for a20

SELECT * FROM
       (SELECT status,inst_id,sid,SESSION_SERIAL# as Serial,username,sql_id,SQL_PLAN_HASH_VALUE,
     MODULE,program,
         TO_CHAR(sql_exec_start,'dd-mon-yyyy hh24:mi:ss') AS sql_exec_start,
         ROUND(elapsed_time/1000000)                      AS "Elapsed (s)",
         ROUND(cpu_time    /1000000)                      AS "CPU (s)",
         substr(sql_text,1,30) sql_text
       FROM gv$sql_monitor where status='EXECUTING' and module not like '%emagent%' 
       ORDER BY sql_exec_start  desc
       );

/*************************************************************************
---- Sql-Monitor report for a sql_id         ( Like OEM report)
**************************************************************************/
column text_line format a254
set lines 750 pages 9999
set long 20000 longchunksize 20000
select 
 dbms_sqltune.report_sql_monitor_list() text_line 
from dual;

select 
 dbms_sqltune.report_sql_monitor() text_line 
from dual;

4. Blocking sessions

**** To find Blocking GOOD query 

set lines 750 pages 9999
col blocking_status for a100 
 select s1.inst_id,s2.inst_id,s1.username || '@' || s1.machine
 || ' ( SID=' || s1.sid || ' )  is blocking '
 || s2.username || '@' || s2.machine || ' ( SID=' || s2.sid || ' ) ' AS blocking_status
  from gv$lock l1, gv$session s1, gv$lock l2, gv$session s2
  where s1.sid=l1.sid and s2.sid=l2.sid and s1.inst_id=l1.inst_id and s2.inst_id=l2.inst_id
  and l1.BLOCK=1 and l2.request > 0
  and l1.id1 = l2.id1
  and l2.id2 = l2.id2
order by s1.inst_id;

**** Check who is blocking who in RAC, including objects

SELECT DECODE(request,0,'Holder: ','Waiter: ') || gv$lock.sid sess, machine, do.object_name as locked_object,id1, id2, lmode, request, gv$lock.type
FROM gv$lock join gv$session on gv$lock.sid=gv$session.sid and gv$lock.inst_id=gv$session.inst_id
join gv$locked_object lo on gv$lock.SID = lo.SESSION_ID and gv$lock.inst_id=lo.inst_id
join dba_objects do on lo.OBJECT_ID = do.OBJECT_ID 
WHERE (id1, id2, gv$lock.type) IN (
  SELECT id1, id2, type FROM gv$lock WHERE request>0)
ORDER BY id1, request;

5. Kill Sessions

select 'alter system kill session ' || '''' || sid || ',' || serial# ||',@'|| inst_id || '''' || ' immediate;' from gv$session where sid='&sid';

6. SQL History

set lines 1000 pages 9999
COL instance_number FOR 9999 HEA 'Inst';
COL end_time HEA 'End Time';
COL plan_hash_value HEA 'Plan|Hash Value';
COL executions_total FOR 999,999 HEA 'Execs|Total';
COL rows_per_exec HEA 'Rows Per Exec';
COL et_secs_per_exec HEA 'Elap Secs|Per Exec';
COL cpu_secs_per_exec HEA 'CPU Secs|Per Exec';
COL io_secs_per_exec HEA 'IO Secs|Per Exec';
COL cl_secs_per_exec HEA 'Clus Secs|Per Exec';
COL ap_secs_per_exec HEA 'App Secs|Per Exec';
COL cc_secs_per_exec HEA 'Conc Secs|Per Exec';
COL pl_secs_per_exec HEA 'PLSQL Secs|Per Exec';
COL ja_secs_per_exec HEA 'Java Secs|Per Exec';
SELECT 'gv$dba_hist_sqlstat' source,h.instance_number,
       TO_CHAR(CAST(s.begin_interval_time AS DATE), 'DD-MM-YYYY HH24:MI') snap_time,
       TO_CHAR(CAST(s.end_interval_time AS DATE), 'DD-MM-YYYY HH24:MI') end_time,
       h.sql_id,
       h.plan_hash_value, 
       h.executions_total,
       TO_CHAR(ROUND(h.rows_processed_total / h.executions_total), '999,999,999,999') rows_per_exec,
       TO_CHAR(ROUND(h.elapsed_time_total / h.executions_total / 1e6, 3), '999,990.000') et_secs_per_exec,
       TO_CHAR(ROUND(h.cpu_time_total / h.executions_total / 1e6, 3), '999,990.000') cpu_secs_per_exec,
       TO_CHAR(ROUND(h.iowait_total / h.executions_total / 1e6, 3), '999,990.000') io_secs_per_exec,
       TO_CHAR(ROUND(h.clwait_total / h.executions_total / 1e6, 3), '999,990.000') cl_secs_per_exec,
       TO_CHAR(ROUND(h.apwait_total / h.executions_total / 1e6, 3), '999,990.000') ap_secs_per_exec,
       TO_CHAR(ROUND(h.ccwait_total / h.executions_total / 1e6, 3), '999,990.000') cc_secs_per_exec,
       TO_CHAR(ROUND(h.plsexec_time_total / h.executions_total / 1e6, 3), '999,990.000') pl_secs_per_exec,
       TO_CHAR(ROUND(h.javexec_time_total / h.executions_total / 1e6, 3), '999,990.000') ja_secs_per_exec
  FROM dba_hist_sqlstat h, 
       dba_hist_snapshot s
 WHERE h.sql_id = '&sql_id'
   AND h.executions_total > 0 
   AND s.snap_id = h.snap_id
   AND s.dbid = h.dbid
   AND s.instance_number = h.instance_number
UNION ALL  
SELECT 'gv$sqlarea_plan_hash' source,h.inst_id, 
       TO_CHAR(sysdate, 'DD-MM-YYYY HH24:MI') snap_time,
       TO_CHAR(sysdate, 'DD-MM-YYYY HH24:MI') end_time,
       h.sql_id,
       h.plan_hash_value, 
       h.executions,
       TO_CHAR(ROUND(h.rows_processed / h.executions), '999,999,999,999') rows_per_exec,
       TO_CHAR(ROUND(h.elapsed_time / h.executions / 1e6, 3), '999,990.000') et_secs_per_exec,
       TO_CHAR(ROUND(h.cpu_time / h.executions / 1e6, 3), '999,990.000') cpu_secs_per_exec,
       TO_CHAR(ROUND(h.USER_IO_WAIT_TIME / h.executions / 1e6, 3), '999,990.000') io_secs_per_exec,
       TO_CHAR(ROUND(h.CLUSTER_WAIT_TIME / h.executions / 1e6, 3), '999,990.000') cl_secs_per_exec,
       TO_CHAR(ROUND(h.APPLICATION_WAIT_TIME / h.executions / 1e6, 3), '999,990.000') ap_secs_per_exec,
       TO_CHAR(ROUND(h.CLUSTER_WAIT_TIME / h.executions / 1e6, 3), '999,990.000') cc_secs_per_exec,
       TO_CHAR(ROUND(h.PLSQL_EXEC_TIME / h.executions / 1e6, 3), '999,990.000') pl_secs_per_exec,
       TO_CHAR(ROUND(h.JAVA_EXEC_TIME / h.executions / 1e6, 3), '999,990.000') ja_secs_per_exec
  FROM gv$sqlarea_plan_hash h 
 WHERE h.sql_id = '&sql_id'
   AND h.executions > 0 
order by source ;

7. Find Force Matching Signature

col exact_matching_signature for 99999999999999999999999999
col sql_text for a50
set long 20000
set  lines 750 pages 9999
select sql_id, exact_matching_signature, force_matching_signature, SQL_TEXT from v$sqlarea where sql_id='&sql_id';
UNION ALL
select sql_id,force_matching_signature,SQL_TEXT from dba_hist_sqltext where sql_id='&sql_id'
/

-- If you want to find Bind variable for SQL_ID

col VALUE_STRING for a50  
SELECT NAME,POSITION,DATATYPE_STRING,VALUE_STRING FROM gv$sql_bind_capture WHERE sql_id='&sql_id';



Get the SQLID for running SQL

select sid, serial#, sql_id, event from v$session where username='SH';

We can find below command to check locking in the database:

In Standalone:

sql>select s1.username || '@' || s1.machine || ' ( SID=' || s1.sid || ') is blocking'
       || s2.username || '@' || s2.machine || '( SID=' || s2.sid || ')' from
       v$lock l1, v$session s1, v$lock l2, v$session s2
       where s1.sid=l1.sid and s2.sid=l2.sid
       and l1.block=1 and l2.request > 0
       and l1.id1=l2.id1
       and l2.id2=l2.id2;

In RAC:

sql> select s1.username || '@' || s1.machine || ' ( SID=' || s1.sid || ') is blocking'
        || s2.username || '@' || s2.machine || '( SID=' || s2.sid || ')' from
       gv$lock l1, gv$session s1, gv$lock l2, gv$session s2
       where s1.sid=l1.sid and s2.sid=l2.sid
       and l1.block=1 and l2.request > 0
       and l1.id1=l2.id1
       and l2.id2=l2.id2;
	   
	   
	   
EXPLAIN PLAN FOR
<your_query_here>;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);



EXEC DBMS_STATS.GATHER_SCHEMA_STATS('SCHEMA_NAME', CASCADE => TRUE);

SELECT * FROM V$SESSION WHERE BLOCKING_SESSION IS NOT NULL;


SELECT EVENT, TIME_WAITED, WAIT_CLASS
FROM V$SESSION_EVENT
WHERE SID = <session_id>;


Using SQL Tuning Advisor:

DECLARE
  task_name VARCHAR2(30);
BEGIN
  task_name := DBMS_SQLTUNE.CREATE_TUNING_TASK(
                 sql_text     => '<your_sql_text>',
                 scope        => DBMS_SQLTUNE.SCOPE_COMPREHENSIVE,
                 time_limit   => 60,
                 task_name    => 'YourTaskName');
END;
/


EXEC DBMS_SQLTUNE.EXECUTE_TUNING_TASK('YourTaskName');


SELECT DBMS_SQLTUNE.REPORT_TUNING_TASK('YourTaskName') AS recommendations
FROM dual;

EXEC DBMS_SQLTUNE.IMPLEMENT_TUNING_TASK('YourTaskName');


SELECT *
FROM DBA_SQL_PROFILES
WHERE NAME = 'YourProfileName';


SELECT *
FROM DBA_SQL_PLAN_PROFILES
WHERE SQL_TEXT = '<your_sql_text>';



Create a Public Database Link:


-- Connect as a user with DBA privileges or CREATE DATABASE LINK privileges
CONNECT sys as sysdba;

-- Create a public database link
CREATE PUBLIC DATABASE LINK public_link
  CONNECT TO remote_user IDENTIFIED BY remote_password
  USING 'remote_database';



-- Connect as the user who needs the private database link
CONNECT username/password;

-- Create a private database link
CREATE DATABASE LINK private_link
  CONNECT TO remote_user IDENTIFIED BY remote_password
  USING 'remote_database';




-- Using the public database link
SELECT * FROM remote_table@public_link;

-- Using the private database link
SELECT * FROM remote_table@private_link;

Drop Database Links:

-- Drop the public database link
DROP PUBLIC DATABASE LINK public_link;

-- Drop the private database link
DROP DATABASE LINK private_link;



 Long-Running Queries:
 
 
 SELECT * FROM V$SESSION WHERE STATUS = 'ACTIVE' AND LAST_CALL_ET > 300; -- sessions running for more than 5 minutes


Analyze Execution Plan:

EXPLAIN PLAN FOR
<your_query_here>;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);


Check for Missing Indexes:

EXEC DBMS_SQLTUNE.CREATE_TUNING_TASK('TASK_NAME');
EXEC DBMS_SQLTUNE.EXECUTE_TUNING_TASK('TASK_NAME');


SELECT DBMS_SQLTUNE.REPORT_TUNING_TASK('TASK_NAME') FROM DUAL;


Update Statistics:

EXEC DBMS_STATS.GATHER_SCHEMA_STATS('SCHEMA_NAME', CASCADE => TRUE);


Check for Existing SQL Profiles:

SELECT * FROM DBA_SQL_PROFILES WHERE NAME = 'your_profile_name';


Create a SQL Profile:

DECLARE
  task_name VARCHAR2(30);
BEGIN
  task_name := DBMS_SQLTUNE.CREATE_TUNING_TASK(
                 sql_text     => 'your_sql_statement',
                 scope        => DBMS_SQLTUNE.SCOPE_COMPREHENSIVE,
                 time_limit   => 60,
                 task_name    => 'YourTaskName');
END;
/


Execute the Tuning Task:

EXEC DBMS_SQLTUNE.EXECUTE_TUNING_TASK('YourTaskName');


Generate Recommendations:

SELECT DBMS_SQLTUNE.REPORT_TUNING_TASK('YourTaskName') AS recommendations
FROM dual;


. Implement Recommendations as a SQL Profile:

EXEC DBMS_SQLTUNE.IMPLEMENT_TUNING_TASK('YourTaskName');


Verify the SQL Profile:

SELECT * FROM DBA_SQL_PROFILES WHERE NAME = 'YourProfileName';

Drop a SQL Profile:

EXEC DBMS_SQLTUNE.DROP_SQL_PROFILE('YourProfileName');


SELECT name,
       total_mb AS total_space_mb,
       free_mb AS free_space_mb,
       (total_mb - free_mb) AS used_space_mb,
       (free_mb + (total_mb - free_mb)) AS unallocated_space_mb
FROM v$asm_diskgroup;


SELECT
    constraint_name,
    constraint_type,
    table_name,
    search_condition
FROM
    all_constraints
WHERE
    owner = 'YourSchemaName'; -- Replace 'YourSchemaName' with the name of the schema you're interested in

-- Optionally, you can add additional filters or conditions to narrow down the results
-- For example, to only retrieve primary key constraints:
-- AND constraint_type = 'P'


SELECT s1.sid || ',' || s1.serial# AS blocking_session,
       s2.sid || ',' || s2.serial# AS waiting_session,
       s1.username AS blocking_username,
       s2.username AS waiting_username,
       s2.event AS waiting_event,
       s2.seconds_in_wait AS waiting_duration,
       s1.sql_id AS blocking_sql_id,
       s2.sql_id AS waiting_sql_id,
       s2.status
FROM v$session s1
JOIN v$session_wait sw ON s1.sid = sw.blocking_session
JOIN v$session s2 ON sw.sid = s2.sid
WHERE s2.wait_class != 'Idle'
  AND s2.username IS NOT NULL
  AND s2.status = 'ACTIVE';


