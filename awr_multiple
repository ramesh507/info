-- PL/SQL to generate multiple AWR HTML reports in one shot with start and end dates as inputs
prompt AWR Reports will be generated in /backup/AWR_MULTI_06012021/ directory 
prompt Please provide start and end time in "DDMMYYYY HH24MI" format 
CREATE OR REPLACE DIRECTORY awr_reports_dir AS 
'/backup/AWR_MULTI_06012021/';

DECLARE
   l_start_time       varchar2(20):='&DDMMYYYY_space_HH24MI';
   l_end_time         varchar2(20):='&DDMMYYYY_space_HH24MI';
   l_snap_start       NUMBER;
   l_snap_end         NUMBEr;
   l_dir              VARCHAR2(50) := 'AWR_REPORTS_DIR';

   l_last_snap        NUMBER := NULL;
   l_dbid             v$database.dbid%TYPE;
   l_instance_number  v$instance.instance_number%TYPE;
   l_file             UTL_FILE.file_type;
   l_file_name        VARCHAR(50);

BEGIN
   SELECT dbid
   INTO   l_dbid
   FROM   v$database;

   SELECT instance_number
   INTO   l_instance_number
   FROM   v$instance;

  select min(SNAP_ID) into l_snap_start
  from  wrm$_snapshot
  where  BEGIN_INTERVAL_TIME>=to_date(l_start_time,'DDMMYYYY HH24MI')
  and instance_number = l_instance_number;

  select max(SNAP_ID) into l_snap_end
  from  wrm$_snapshot
  where  BEGIN_INTERVAL_TIME<=to_date(l_end_time,'DDMMYYYY HH24MI')
  and instance_number = l_instance_number;

   FOR cur_snap IN (SELECT snap_id, BEGIN_INTERVAL_TIME, END_INTERVAL_TIME
                    FROM   dba_hist_snapshot
                    WHERE  instance_number = l_instance_number
                    AND    snap_id BETWEEN l_snap_start AND l_snap_end
                    ORDER BY snap_id)
   LOOP
     IF l_last_snap IS NOT NULL THEN
       l_file := UTL_FILE.fopen(l_dir, 'awr_' || l_last_snap || '_' || cur_snap.snap_id ||'_'||to_char(cur_snap.BEGIN_INTERVAL_TIME,'dd-MON-yyyy_hh24miss')||'_'||to_char(cur_snap.END_INTERVAL_TIME,'hh24miss') ||  '.html', 'w', 32767);

       FOR cur_rep IN (SELECT output
                       FROM   
TABLE(DBMS_WORKLOAD_REPOSITORY.awr_report_html(l_dbid, l_instance_number, l_last_snap, cur_snap.snap_id)))
       LOOP
         UTL_FILE.put_line(l_file, cur_rep.output);
       END LOOP;
       UTL_FILE.fclose(l_file);
     END IF;
     l_last_snap := cur_snap.snap_id;
   END LOOP;

EXCEPTION
   WHEN OTHERS THEN
     IF UTL_FILE.is_open(l_file) THEN
       UTL_FILE.fclose(l_file);
     END IF;
     RAISE;
END;
/



@/home/oracle/AWR/AWR_SQL_18012022.sql


10012022 0000

10012022 2359
